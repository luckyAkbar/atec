// Code generated by mockery v2.52.2. DO NOT EDIT.

package usecase

import (
	context "context"

	usecase "github.com/luckyAkbar/atec/internal/usecase"
	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// PackageUsecaseIface is an autogenerated mock type for the PackageUsecaseIface type
type PackageUsecaseIface struct {
	mock.Mock
}

type PackageUsecaseIface_Expecter struct {
	mock *mock.Mock
}

func (_m *PackageUsecaseIface) EXPECT() *PackageUsecaseIface_Expecter {
	return &PackageUsecaseIface_Expecter{mock: &_m.Mock}
}

// ChangeActiveStatus provides a mock function with given fields: ctx, input
func (_m *PackageUsecaseIface) ChangeActiveStatus(ctx context.Context, input usecase.ChangeActiveStatusInput) (*usecase.ChangeActiveStatusOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for ChangeActiveStatus")
	}

	var r0 *usecase.ChangeActiveStatusOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.ChangeActiveStatusInput) (*usecase.ChangeActiveStatusOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.ChangeActiveStatusInput) *usecase.ChangeActiveStatusOutput); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.ChangeActiveStatusOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.ChangeActiveStatusInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PackageUsecaseIface_ChangeActiveStatus_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ChangeActiveStatus'
type PackageUsecaseIface_ChangeActiveStatus_Call struct {
	*mock.Call
}

// ChangeActiveStatus is a helper method to define mock.On call
//   - ctx context.Context
//   - input usecase.ChangeActiveStatusInput
func (_e *PackageUsecaseIface_Expecter) ChangeActiveStatus(ctx interface{}, input interface{}) *PackageUsecaseIface_ChangeActiveStatus_Call {
	return &PackageUsecaseIface_ChangeActiveStatus_Call{Call: _e.mock.On("ChangeActiveStatus", ctx, input)}
}

func (_c *PackageUsecaseIface_ChangeActiveStatus_Call) Run(run func(ctx context.Context, input usecase.ChangeActiveStatusInput)) *PackageUsecaseIface_ChangeActiveStatus_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecase.ChangeActiveStatusInput))
	})
	return _c
}

func (_c *PackageUsecaseIface_ChangeActiveStatus_Call) Return(_a0 *usecase.ChangeActiveStatusOutput, _a1 error) *PackageUsecaseIface_ChangeActiveStatus_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PackageUsecaseIface_ChangeActiveStatus_Call) RunAndReturn(run func(context.Context, usecase.ChangeActiveStatusInput) (*usecase.ChangeActiveStatusOutput, error)) *PackageUsecaseIface_ChangeActiveStatus_Call {
	_c.Call.Return(run)
	return _c
}

// Create provides a mock function with given fields: ctx, input
func (_m *PackageUsecaseIface) Create(ctx context.Context, input usecase.CreatePackageInput) (*usecase.CreatePackageOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *usecase.CreatePackageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.CreatePackageInput) (*usecase.CreatePackageOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.CreatePackageInput) *usecase.CreatePackageOutput); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.CreatePackageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.CreatePackageInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PackageUsecaseIface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type PackageUsecaseIface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - input usecase.CreatePackageInput
func (_e *PackageUsecaseIface_Expecter) Create(ctx interface{}, input interface{}) *PackageUsecaseIface_Create_Call {
	return &PackageUsecaseIface_Create_Call{Call: _e.mock.On("Create", ctx, input)}
}

func (_c *PackageUsecaseIface_Create_Call) Run(run func(ctx context.Context, input usecase.CreatePackageInput)) *PackageUsecaseIface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecase.CreatePackageInput))
	})
	return _c
}

func (_c *PackageUsecaseIface_Create_Call) Return(_a0 *usecase.CreatePackageOutput, _a1 error) *PackageUsecaseIface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PackageUsecaseIface_Create_Call) RunAndReturn(run func(context.Context, usecase.CreatePackageInput) (*usecase.CreatePackageOutput, error)) *PackageUsecaseIface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *PackageUsecaseIface) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PackageUsecaseIface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type PackageUsecaseIface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *PackageUsecaseIface_Expecter) Delete(ctx interface{}, id interface{}) *PackageUsecaseIface_Delete_Call {
	return &PackageUsecaseIface_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *PackageUsecaseIface_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *PackageUsecaseIface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PackageUsecaseIface_Delete_Call) Return(_a0 error) *PackageUsecaseIface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PackageUsecaseIface_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *PackageUsecaseIface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindActiveQuestionnaires provides a mock function with given fields: ctx
func (_m *PackageUsecaseIface) FindActiveQuestionnaires(ctx context.Context) ([]usecase.FindActiveQuestionnaireOutput, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindActiveQuestionnaires")
	}

	var r0 []usecase.FindActiveQuestionnaireOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]usecase.FindActiveQuestionnaireOutput, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []usecase.FindActiveQuestionnaireOutput); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]usecase.FindActiveQuestionnaireOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PackageUsecaseIface_FindActiveQuestionnaires_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindActiveQuestionnaires'
type PackageUsecaseIface_FindActiveQuestionnaires_Call struct {
	*mock.Call
}

// FindActiveQuestionnaires is a helper method to define mock.On call
//   - ctx context.Context
func (_e *PackageUsecaseIface_Expecter) FindActiveQuestionnaires(ctx interface{}) *PackageUsecaseIface_FindActiveQuestionnaires_Call {
	return &PackageUsecaseIface_FindActiveQuestionnaires_Call{Call: _e.mock.On("FindActiveQuestionnaires", ctx)}
}

func (_c *PackageUsecaseIface_FindActiveQuestionnaires_Call) Run(run func(ctx context.Context)) *PackageUsecaseIface_FindActiveQuestionnaires_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *PackageUsecaseIface_FindActiveQuestionnaires_Call) Return(_a0 []usecase.FindActiveQuestionnaireOutput, _a1 error) *PackageUsecaseIface_FindActiveQuestionnaires_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PackageUsecaseIface_FindActiveQuestionnaires_Call) RunAndReturn(run func(context.Context) ([]usecase.FindActiveQuestionnaireOutput, error)) *PackageUsecaseIface_FindActiveQuestionnaires_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, input
func (_m *PackageUsecaseIface) Update(ctx context.Context, input usecase.UpdatePackageInput) (*usecase.UpdatePackageOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *usecase.UpdatePackageOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.UpdatePackageInput) (*usecase.UpdatePackageOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.UpdatePackageInput) *usecase.UpdatePackageOutput); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.UpdatePackageOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.UpdatePackageInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PackageUsecaseIface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type PackageUsecaseIface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - input usecase.UpdatePackageInput
func (_e *PackageUsecaseIface_Expecter) Update(ctx interface{}, input interface{}) *PackageUsecaseIface_Update_Call {
	return &PackageUsecaseIface_Update_Call{Call: _e.mock.On("Update", ctx, input)}
}

func (_c *PackageUsecaseIface_Update_Call) Run(run func(ctx context.Context, input usecase.UpdatePackageInput)) *PackageUsecaseIface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecase.UpdatePackageInput))
	})
	return _c
}

func (_c *PackageUsecaseIface_Update_Call) Return(_a0 *usecase.UpdatePackageOutput, _a1 error) *PackageUsecaseIface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PackageUsecaseIface_Update_Call) RunAndReturn(run func(context.Context, usecase.UpdatePackageInput) (*usecase.UpdatePackageOutput, error)) *PackageUsecaseIface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewPackageUsecaseIface creates a new instance of PackageUsecaseIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPackageUsecaseIface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PackageUsecaseIface {
	mock := &PackageUsecaseIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
