// Code generated by mockery v2.52.2. DO NOT EDIT.

package usecase

import (
	context "context"

	model "github.com/luckyAkbar/atec/internal/model"
	mock "github.com/stretchr/testify/mock"

	usecase "github.com/luckyAkbar/atec/internal/usecase"

	uuid "github.com/google/uuid"
)

// ResultRepository is an autogenerated mock type for the ResultRepository type
type ResultRepository struct {
	mock.Mock
}

type ResultRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *ResultRepository) EXPECT() *ResultRepository_Expecter {
	return &ResultRepository_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, input
func (_m *ResultRepository) Create(ctx context.Context, input usecase.RepoCreateResultInput) (*model.Result, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.RepoCreateResultInput) (*model.Result, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.RepoCreateResultInput) *model.Result); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.RepoCreateResultInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResultRepository_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type ResultRepository_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - input usecase.RepoCreateResultInput
func (_e *ResultRepository_Expecter) Create(ctx interface{}, input interface{}) *ResultRepository_Create_Call {
	return &ResultRepository_Create_Call{Call: _e.mock.On("Create", ctx, input)}
}

func (_c *ResultRepository_Create_Call) Run(run func(ctx context.Context, input usecase.RepoCreateResultInput)) *ResultRepository_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecase.RepoCreateResultInput))
	})
	return _c
}

func (_c *ResultRepository_Create_Call) Return(_a0 *model.Result, _a1 error) *ResultRepository_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResultRepository_Create_Call) RunAndReturn(run func(context.Context, usecase.RepoCreateResultInput) (*model.Result, error)) *ResultRepository_Create_Call {
	_c.Call.Return(run)
	return _c
}

// FindAllUserHistory provides a mock function with given fields: ctx, input
func (_m *ResultRepository) FindAllUserHistory(ctx context.Context, input usecase.RepoFindAllUserHistoryInput) ([]model.Result, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for FindAllUserHistory")
	}

	var r0 []model.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.RepoFindAllUserHistoryInput) ([]model.Result, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.RepoFindAllUserHistoryInput) []model.Result); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.RepoFindAllUserHistoryInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResultRepository_FindAllUserHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindAllUserHistory'
type ResultRepository_FindAllUserHistory_Call struct {
	*mock.Call
}

// FindAllUserHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - input usecase.RepoFindAllUserHistoryInput
func (_e *ResultRepository_Expecter) FindAllUserHistory(ctx interface{}, input interface{}) *ResultRepository_FindAllUserHistory_Call {
	return &ResultRepository_FindAllUserHistory_Call{Call: _e.mock.On("FindAllUserHistory", ctx, input)}
}

func (_c *ResultRepository_FindAllUserHistory_Call) Run(run func(ctx context.Context, input usecase.RepoFindAllUserHistoryInput)) *ResultRepository_FindAllUserHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecase.RepoFindAllUserHistoryInput))
	})
	return _c
}

func (_c *ResultRepository_FindAllUserHistory_Call) Return(_a0 []model.Result, _a1 error) *ResultRepository_FindAllUserHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResultRepository_FindAllUserHistory_Call) RunAndReturn(run func(context.Context, usecase.RepoFindAllUserHistoryInput) ([]model.Result, error)) *ResultRepository_FindAllUserHistory_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *ResultRepository) FindByID(ctx context.Context, id uuid.UUID) (*model.Result, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *model.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Result, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Result); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResultRepository_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type ResultRepository_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *ResultRepository_Expecter) FindByID(ctx interface{}, id interface{}) *ResultRepository_FindByID_Call {
	return &ResultRepository_FindByID_Call{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *ResultRepository_FindByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *ResultRepository_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *ResultRepository_FindByID_Call) Return(_a0 *model.Result, _a1 error) *ResultRepository_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResultRepository_FindByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*model.Result, error)) *ResultRepository_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: ctx, input
func (_m *ResultRepository) Search(ctx context.Context, input usecase.RepoSearchResultInput) ([]model.Result, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []model.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.RepoSearchResultInput) ([]model.Result, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.RepoSearchResultInput) []model.Result); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.RepoSearchResultInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ResultRepository_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type ResultRepository_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - input usecase.RepoSearchResultInput
func (_e *ResultRepository_Expecter) Search(ctx interface{}, input interface{}) *ResultRepository_Search_Call {
	return &ResultRepository_Search_Call{Call: _e.mock.On("Search", ctx, input)}
}

func (_c *ResultRepository_Search_Call) Run(run func(ctx context.Context, input usecase.RepoSearchResultInput)) *ResultRepository_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecase.RepoSearchResultInput))
	})
	return _c
}

func (_c *ResultRepository_Search_Call) Return(_a0 []model.Result, _a1 error) *ResultRepository_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ResultRepository_Search_Call) RunAndReturn(run func(context.Context, usecase.RepoSearchResultInput) ([]model.Result, error)) *ResultRepository_Search_Call {
	_c.Call.Return(run)
	return _c
}

// NewResultRepository creates a new instance of ResultRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewResultRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ResultRepository {
	mock := &ResultRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
