// Code generated by mockery v2.52.2. DO NOT EDIT.

package usecase

import (
	context "context"

	usecase "github.com/luckyAkbar/atec/internal/usecase"
	mock "github.com/stretchr/testify/mock"
)

// QuestionnaireUsecaseIface is an autogenerated mock type for the QuestionnaireUsecaseIface type
type QuestionnaireUsecaseIface struct {
	mock.Mock
}

type QuestionnaireUsecaseIface_Expecter struct {
	mock *mock.Mock
}

func (_m *QuestionnaireUsecaseIface) EXPECT() *QuestionnaireUsecaseIface_Expecter {
	return &QuestionnaireUsecaseIface_Expecter{mock: &_m.Mock}
}

// HandleDownloadQuestionnaireResult provides a mock function with given fields: ctx, input
func (_m *QuestionnaireUsecaseIface) HandleDownloadQuestionnaireResult(ctx context.Context, input usecase.DownloadQuestionnaireResultInput) (*usecase.DownloadQuestionnaireResultOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for HandleDownloadQuestionnaireResult")
	}

	var r0 *usecase.DownloadQuestionnaireResultOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.DownloadQuestionnaireResultInput) (*usecase.DownloadQuestionnaireResultOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.DownloadQuestionnaireResultInput) *usecase.DownloadQuestionnaireResultOutput); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.DownloadQuestionnaireResultOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.DownloadQuestionnaireResultInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QuestionnaireUsecaseIface_HandleDownloadQuestionnaireResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleDownloadQuestionnaireResult'
type QuestionnaireUsecaseIface_HandleDownloadQuestionnaireResult_Call struct {
	*mock.Call
}

// HandleDownloadQuestionnaireResult is a helper method to define mock.On call
//   - ctx context.Context
//   - input usecase.DownloadQuestionnaireResultInput
func (_e *QuestionnaireUsecaseIface_Expecter) HandleDownloadQuestionnaireResult(ctx interface{}, input interface{}) *QuestionnaireUsecaseIface_HandleDownloadQuestionnaireResult_Call {
	return &QuestionnaireUsecaseIface_HandleDownloadQuestionnaireResult_Call{Call: _e.mock.On("HandleDownloadQuestionnaireResult", ctx, input)}
}

func (_c *QuestionnaireUsecaseIface_HandleDownloadQuestionnaireResult_Call) Run(run func(ctx context.Context, input usecase.DownloadQuestionnaireResultInput)) *QuestionnaireUsecaseIface_HandleDownloadQuestionnaireResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecase.DownloadQuestionnaireResultInput))
	})
	return _c
}

func (_c *QuestionnaireUsecaseIface_HandleDownloadQuestionnaireResult_Call) Return(_a0 *usecase.DownloadQuestionnaireResultOutput, _a1 error) *QuestionnaireUsecaseIface_HandleDownloadQuestionnaireResult_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QuestionnaireUsecaseIface_HandleDownloadQuestionnaireResult_Call) RunAndReturn(run func(context.Context, usecase.DownloadQuestionnaireResultInput) (*usecase.DownloadQuestionnaireResultOutput, error)) *QuestionnaireUsecaseIface_HandleDownloadQuestionnaireResult_Call {
	_c.Call.Return(run)
	return _c
}

// HandleGetUserHistory provides a mock function with given fields: ctx, input
func (_m *QuestionnaireUsecaseIface) HandleGetUserHistory(ctx context.Context, input usecase.GetUserHistoryInput) ([]usecase.GetUserHistoryOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for HandleGetUserHistory")
	}

	var r0 []usecase.GetUserHistoryOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.GetUserHistoryInput) ([]usecase.GetUserHistoryOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.GetUserHistoryInput) []usecase.GetUserHistoryOutput); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]usecase.GetUserHistoryOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.GetUserHistoryInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QuestionnaireUsecaseIface_HandleGetUserHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleGetUserHistory'
type QuestionnaireUsecaseIface_HandleGetUserHistory_Call struct {
	*mock.Call
}

// HandleGetUserHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - input usecase.GetUserHistoryInput
func (_e *QuestionnaireUsecaseIface_Expecter) HandleGetUserHistory(ctx interface{}, input interface{}) *QuestionnaireUsecaseIface_HandleGetUserHistory_Call {
	return &QuestionnaireUsecaseIface_HandleGetUserHistory_Call{Call: _e.mock.On("HandleGetUserHistory", ctx, input)}
}

func (_c *QuestionnaireUsecaseIface_HandleGetUserHistory_Call) Run(run func(ctx context.Context, input usecase.GetUserHistoryInput)) *QuestionnaireUsecaseIface_HandleGetUserHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecase.GetUserHistoryInput))
	})
	return _c
}

func (_c *QuestionnaireUsecaseIface_HandleGetUserHistory_Call) Return(_a0 []usecase.GetUserHistoryOutput, _a1 error) *QuestionnaireUsecaseIface_HandleGetUserHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QuestionnaireUsecaseIface_HandleGetUserHistory_Call) RunAndReturn(run func(context.Context, usecase.GetUserHistoryInput) ([]usecase.GetUserHistoryOutput, error)) *QuestionnaireUsecaseIface_HandleGetUserHistory_Call {
	_c.Call.Return(run)
	return _c
}

// HandleInitializeATECQuestionnaire provides a mock function with given fields: ctx, input
func (_m *QuestionnaireUsecaseIface) HandleInitializeATECQuestionnaire(ctx context.Context, input usecase.InitializeATECQuestionnaireInput) (*usecase.InitializeATECQuestionnaireOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for HandleInitializeATECQuestionnaire")
	}

	var r0 *usecase.InitializeATECQuestionnaireOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.InitializeATECQuestionnaireInput) (*usecase.InitializeATECQuestionnaireOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.InitializeATECQuestionnaireInput) *usecase.InitializeATECQuestionnaireOutput); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.InitializeATECQuestionnaireOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.InitializeATECQuestionnaireInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QuestionnaireUsecaseIface_HandleInitializeATECQuestionnaire_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleInitializeATECQuestionnaire'
type QuestionnaireUsecaseIface_HandleInitializeATECQuestionnaire_Call struct {
	*mock.Call
}

// HandleInitializeATECQuestionnaire is a helper method to define mock.On call
//   - ctx context.Context
//   - input usecase.InitializeATECQuestionnaireInput
func (_e *QuestionnaireUsecaseIface_Expecter) HandleInitializeATECQuestionnaire(ctx interface{}, input interface{}) *QuestionnaireUsecaseIface_HandleInitializeATECQuestionnaire_Call {
	return &QuestionnaireUsecaseIface_HandleInitializeATECQuestionnaire_Call{Call: _e.mock.On("HandleInitializeATECQuestionnaire", ctx, input)}
}

func (_c *QuestionnaireUsecaseIface_HandleInitializeATECQuestionnaire_Call) Run(run func(ctx context.Context, input usecase.InitializeATECQuestionnaireInput)) *QuestionnaireUsecaseIface_HandleInitializeATECQuestionnaire_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecase.InitializeATECQuestionnaireInput))
	})
	return _c
}

func (_c *QuestionnaireUsecaseIface_HandleInitializeATECQuestionnaire_Call) Return(_a0 *usecase.InitializeATECQuestionnaireOutput, _a1 error) *QuestionnaireUsecaseIface_HandleInitializeATECQuestionnaire_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QuestionnaireUsecaseIface_HandleInitializeATECQuestionnaire_Call) RunAndReturn(run func(context.Context, usecase.InitializeATECQuestionnaireInput) (*usecase.InitializeATECQuestionnaireOutput, error)) *QuestionnaireUsecaseIface_HandleInitializeATECQuestionnaire_Call {
	_c.Call.Return(run)
	return _c
}

// HandleSearchQuestionnaireResult provides a mock function with given fields: ctx, input
func (_m *QuestionnaireUsecaseIface) HandleSearchQuestionnaireResult(ctx context.Context, input usecase.SearchQuestionnaireResultInput) ([]usecase.SearchQuestionnaireResultOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for HandleSearchQuestionnaireResult")
	}

	var r0 []usecase.SearchQuestionnaireResultOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.SearchQuestionnaireResultInput) ([]usecase.SearchQuestionnaireResultOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.SearchQuestionnaireResultInput) []usecase.SearchQuestionnaireResultOutput); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]usecase.SearchQuestionnaireResultOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.SearchQuestionnaireResultInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QuestionnaireUsecaseIface_HandleSearchQuestionnaireResult_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleSearchQuestionnaireResult'
type QuestionnaireUsecaseIface_HandleSearchQuestionnaireResult_Call struct {
	*mock.Call
}

// HandleSearchQuestionnaireResult is a helper method to define mock.On call
//   - ctx context.Context
//   - input usecase.SearchQuestionnaireResultInput
func (_e *QuestionnaireUsecaseIface_Expecter) HandleSearchQuestionnaireResult(ctx interface{}, input interface{}) *QuestionnaireUsecaseIface_HandleSearchQuestionnaireResult_Call {
	return &QuestionnaireUsecaseIface_HandleSearchQuestionnaireResult_Call{Call: _e.mock.On("HandleSearchQuestionnaireResult", ctx, input)}
}

func (_c *QuestionnaireUsecaseIface_HandleSearchQuestionnaireResult_Call) Run(run func(ctx context.Context, input usecase.SearchQuestionnaireResultInput)) *QuestionnaireUsecaseIface_HandleSearchQuestionnaireResult_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecase.SearchQuestionnaireResultInput))
	})
	return _c
}

func (_c *QuestionnaireUsecaseIface_HandleSearchQuestionnaireResult_Call) Return(_a0 []usecase.SearchQuestionnaireResultOutput, _a1 error) *QuestionnaireUsecaseIface_HandleSearchQuestionnaireResult_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QuestionnaireUsecaseIface_HandleSearchQuestionnaireResult_Call) RunAndReturn(run func(context.Context, usecase.SearchQuestionnaireResultInput) ([]usecase.SearchQuestionnaireResultOutput, error)) *QuestionnaireUsecaseIface_HandleSearchQuestionnaireResult_Call {
	_c.Call.Return(run)
	return _c
}

// HandleSubmitQuestionnaire provides a mock function with given fields: ctx, input
func (_m *QuestionnaireUsecaseIface) HandleSubmitQuestionnaire(ctx context.Context, input usecase.SubmitQuestionnaireInput) (*usecase.SubmitQuestionnaireOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for HandleSubmitQuestionnaire")
	}

	var r0 *usecase.SubmitQuestionnaireOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.SubmitQuestionnaireInput) (*usecase.SubmitQuestionnaireOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.SubmitQuestionnaireInput) *usecase.SubmitQuestionnaireOutput); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.SubmitQuestionnaireOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.SubmitQuestionnaireInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// QuestionnaireUsecaseIface_HandleSubmitQuestionnaire_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleSubmitQuestionnaire'
type QuestionnaireUsecaseIface_HandleSubmitQuestionnaire_Call struct {
	*mock.Call
}

// HandleSubmitQuestionnaire is a helper method to define mock.On call
//   - ctx context.Context
//   - input usecase.SubmitQuestionnaireInput
func (_e *QuestionnaireUsecaseIface_Expecter) HandleSubmitQuestionnaire(ctx interface{}, input interface{}) *QuestionnaireUsecaseIface_HandleSubmitQuestionnaire_Call {
	return &QuestionnaireUsecaseIface_HandleSubmitQuestionnaire_Call{Call: _e.mock.On("HandleSubmitQuestionnaire", ctx, input)}
}

func (_c *QuestionnaireUsecaseIface_HandleSubmitQuestionnaire_Call) Run(run func(ctx context.Context, input usecase.SubmitQuestionnaireInput)) *QuestionnaireUsecaseIface_HandleSubmitQuestionnaire_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecase.SubmitQuestionnaireInput))
	})
	return _c
}

func (_c *QuestionnaireUsecaseIface_HandleSubmitQuestionnaire_Call) Return(_a0 *usecase.SubmitQuestionnaireOutput, _a1 error) *QuestionnaireUsecaseIface_HandleSubmitQuestionnaire_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *QuestionnaireUsecaseIface_HandleSubmitQuestionnaire_Call) RunAndReturn(run func(context.Context, usecase.SubmitQuestionnaireInput) (*usecase.SubmitQuestionnaireOutput, error)) *QuestionnaireUsecaseIface_HandleSubmitQuestionnaire_Call {
	_c.Call.Return(run)
	return _c
}

// NewQuestionnaireUsecaseIface creates a new instance of QuestionnaireUsecaseIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewQuestionnaireUsecaseIface(t interface {
	mock.TestingT
	Cleanup(func())
}) *QuestionnaireUsecaseIface {
	mock := &QuestionnaireUsecaseIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
