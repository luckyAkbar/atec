// Code generated by mockery v2.52.2. DO NOT EDIT.

package usecase

import (
	context "context"

	redis_rate "github.com/go-redis/redis_rate/v10"
	mock "github.com/stretchr/testify/mock"
)

// RateLimiter is an autogenerated mock type for the RateLimiter type
type RateLimiter struct {
	mock.Mock
}

type RateLimiter_Expecter struct {
	mock *mock.Mock
}

func (_m *RateLimiter) EXPECT() *RateLimiter_Expecter {
	return &RateLimiter_Expecter{mock: &_m.Mock}
}

// Allow provides a mock function with given fields: ctx, key, limit
func (_m *RateLimiter) Allow(ctx context.Context, key string, limit redis_rate.Limit) (*redis_rate.Result, error) {
	ret := _m.Called(ctx, key, limit)

	if len(ret) == 0 {
		panic("no return value specified for Allow")
	}

	var r0 *redis_rate.Result
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, redis_rate.Limit) (*redis_rate.Result, error)); ok {
		return rf(ctx, key, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, redis_rate.Limit) *redis_rate.Result); ok {
		r0 = rf(ctx, key, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*redis_rate.Result)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, redis_rate.Limit) error); ok {
		r1 = rf(ctx, key, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RateLimiter_Allow_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Allow'
type RateLimiter_Allow_Call struct {
	*mock.Call
}

// Allow is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - limit redis_rate.Limit
func (_e *RateLimiter_Expecter) Allow(ctx interface{}, key interface{}, limit interface{}) *RateLimiter_Allow_Call {
	return &RateLimiter_Allow_Call{Call: _e.mock.On("Allow", ctx, key, limit)}
}

func (_c *RateLimiter_Allow_Call) Run(run func(ctx context.Context, key string, limit redis_rate.Limit)) *RateLimiter_Allow_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(redis_rate.Limit))
	})
	return _c
}

func (_c *RateLimiter_Allow_Call) Return(_a0 *redis_rate.Result, _a1 error) *RateLimiter_Allow_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RateLimiter_Allow_Call) RunAndReturn(run func(context.Context, string, redis_rate.Limit) (*redis_rate.Result, error)) *RateLimiter_Allow_Call {
	_c.Call.Return(run)
	return _c
}

// NewRateLimiter creates a new instance of RateLimiter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRateLimiter(t interface {
	mock.TestingT
	Cleanup(func())
}) *RateLimiter {
	mock := &RateLimiter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
