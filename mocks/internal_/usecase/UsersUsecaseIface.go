// Code generated by mockery v2.52.2. DO NOT EDIT.

package usecase

import (
	context "context"

	usecase "github.com/luckyAkbar/atec/internal/usecase"
	mock "github.com/stretchr/testify/mock"
)

// UsersUsecaseIface is an autogenerated mock type for the UsersUsecaseIface type
type UsersUsecaseIface struct {
	mock.Mock
}

type UsersUsecaseIface_Expecter struct {
	mock *mock.Mock
}

func (_m *UsersUsecaseIface) EXPECT() *UsersUsecaseIface_Expecter {
	return &UsersUsecaseIface_Expecter{mock: &_m.Mock}
}

// GetMyProfile provides a mock function with given fields: ctx
func (_m *UsersUsecaseIface) GetMyProfile(ctx context.Context) (*usecase.GetMyProfileOutput, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetMyProfile")
	}

	var r0 *usecase.GetMyProfileOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*usecase.GetMyProfileOutput, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *usecase.GetMyProfileOutput); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.GetMyProfileOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersUsecaseIface_GetMyProfile_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetMyProfile'
type UsersUsecaseIface_GetMyProfile_Call struct {
	*mock.Call
}

// GetMyProfile is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UsersUsecaseIface_Expecter) GetMyProfile(ctx interface{}) *UsersUsecaseIface_GetMyProfile_Call {
	return &UsersUsecaseIface_GetMyProfile_Call{Call: _e.mock.On("GetMyProfile", ctx)}
}

func (_c *UsersUsecaseIface_GetMyProfile_Call) Run(run func(ctx context.Context)) *UsersUsecaseIface_GetMyProfile_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UsersUsecaseIface_GetMyProfile_Call) Return(_a0 *usecase.GetMyProfileOutput, _a1 error) *UsersUsecaseIface_GetMyProfile_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersUsecaseIface_GetMyProfile_Call) RunAndReturn(run func(context.Context) (*usecase.GetMyProfileOutput, error)) *UsersUsecaseIface_GetMyProfile_Call {
	_c.Call.Return(run)
	return _c
}

// GetTherapistData provides a mock function with given fields: ctx
func (_m *UsersUsecaseIface) GetTherapistData(ctx context.Context) ([]usecase.GetTherapistDataOutput, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetTherapistData")
	}

	var r0 []usecase.GetTherapistDataOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]usecase.GetTherapistDataOutput, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []usecase.GetTherapistDataOutput); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]usecase.GetTherapistDataOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UsersUsecaseIface_GetTherapistData_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetTherapistData'
type UsersUsecaseIface_GetTherapistData_Call struct {
	*mock.Call
}

// GetTherapistData is a helper method to define mock.On call
//   - ctx context.Context
func (_e *UsersUsecaseIface_Expecter) GetTherapistData(ctx interface{}) *UsersUsecaseIface_GetTherapistData_Call {
	return &UsersUsecaseIface_GetTherapistData_Call{Call: _e.mock.On("GetTherapistData", ctx)}
}

func (_c *UsersUsecaseIface_GetTherapistData_Call) Run(run func(ctx context.Context)) *UsersUsecaseIface_GetTherapistData_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *UsersUsecaseIface_GetTherapistData_Call) Return(_a0 []usecase.GetTherapistDataOutput, _a1 error) *UsersUsecaseIface_GetTherapistData_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UsersUsecaseIface_GetTherapistData_Call) RunAndReturn(run func(context.Context) ([]usecase.GetTherapistDataOutput, error)) *UsersUsecaseIface_GetTherapistData_Call {
	_c.Call.Return(run)
	return _c
}

// NewUsersUsecaseIface creates a new instance of UsersUsecaseIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUsersUsecaseIface(t interface {
	mock.TestingT
	Cleanup(func())
}) *UsersUsecaseIface {
	mock := &UsersUsecaseIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
