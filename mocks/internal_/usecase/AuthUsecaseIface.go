// Code generated by mockery v2.52.2. DO NOT EDIT.

package usecase

import (
	context "context"

	usecase "github.com/luckyAkbar/atec/internal/usecase"
	mock "github.com/stretchr/testify/mock"
)

// AuthUsecaseIface is an autogenerated mock type for the AuthUsecaseIface type
type AuthUsecaseIface struct {
	mock.Mock
}

type AuthUsecaseIface_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthUsecaseIface) EXPECT() *AuthUsecaseIface_Expecter {
	return &AuthUsecaseIface_Expecter{mock: &_m.Mock}
}

// AllowAccess provides a mock function with given fields: ctx, input
func (_m *AuthUsecaseIface) AllowAccess(ctx context.Context, input usecase.AllowAccessInput) (*usecase.AllowAccessOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for AllowAccess")
	}

	var r0 *usecase.AllowAccessOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.AllowAccessInput) (*usecase.AllowAccessOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.AllowAccessInput) *usecase.AllowAccessOutput); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.AllowAccessOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.AllowAccessInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthUsecaseIface_AllowAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AllowAccess'
type AuthUsecaseIface_AllowAccess_Call struct {
	*mock.Call
}

// AllowAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - input usecase.AllowAccessInput
func (_e *AuthUsecaseIface_Expecter) AllowAccess(ctx interface{}, input interface{}) *AuthUsecaseIface_AllowAccess_Call {
	return &AuthUsecaseIface_AllowAccess_Call{Call: _e.mock.On("AllowAccess", ctx, input)}
}

func (_c *AuthUsecaseIface_AllowAccess_Call) Run(run func(ctx context.Context, input usecase.AllowAccessInput)) *AuthUsecaseIface_AllowAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecase.AllowAccessInput))
	})
	return _c
}

func (_c *AuthUsecaseIface_AllowAccess_Call) Return(_a0 *usecase.AllowAccessOutput, _a1 error) *AuthUsecaseIface_AllowAccess_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthUsecaseIface_AllowAccess_Call) RunAndReturn(run func(context.Context, usecase.AllowAccessInput) (*usecase.AllowAccessOutput, error)) *AuthUsecaseIface_AllowAccess_Call {
	_c.Call.Return(run)
	return _c
}

// HandleAccountVerification provides a mock function with given fields: ctx, input
func (_m *AuthUsecaseIface) HandleAccountVerification(ctx context.Context, input usecase.AccountVerificationInput) (*usecase.AccountVerificationOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for HandleAccountVerification")
	}

	var r0 *usecase.AccountVerificationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.AccountVerificationInput) (*usecase.AccountVerificationOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.AccountVerificationInput) *usecase.AccountVerificationOutput); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.AccountVerificationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.AccountVerificationInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthUsecaseIface_HandleAccountVerification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleAccountVerification'
type AuthUsecaseIface_HandleAccountVerification_Call struct {
	*mock.Call
}

// HandleAccountVerification is a helper method to define mock.On call
//   - ctx context.Context
//   - input usecase.AccountVerificationInput
func (_e *AuthUsecaseIface_Expecter) HandleAccountVerification(ctx interface{}, input interface{}) *AuthUsecaseIface_HandleAccountVerification_Call {
	return &AuthUsecaseIface_HandleAccountVerification_Call{Call: _e.mock.On("HandleAccountVerification", ctx, input)}
}

func (_c *AuthUsecaseIface_HandleAccountVerification_Call) Run(run func(ctx context.Context, input usecase.AccountVerificationInput)) *AuthUsecaseIface_HandleAccountVerification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecase.AccountVerificationInput))
	})
	return _c
}

func (_c *AuthUsecaseIface_HandleAccountVerification_Call) Return(_a0 *usecase.AccountVerificationOutput, _a1 error) *AuthUsecaseIface_HandleAccountVerification_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthUsecaseIface_HandleAccountVerification_Call) RunAndReturn(run func(context.Context, usecase.AccountVerificationInput) (*usecase.AccountVerificationOutput, error)) *AuthUsecaseIface_HandleAccountVerification_Call {
	_c.Call.Return(run)
	return _c
}

// HandleInitesetPassword provides a mock function with given fields: ctx, input
func (_m *AuthUsecaseIface) HandleInitesetPassword(ctx context.Context, input usecase.InitResetPasswordInput) (*usecase.InitResetPasswordOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for HandleInitesetPassword")
	}

	var r0 *usecase.InitResetPasswordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.InitResetPasswordInput) (*usecase.InitResetPasswordOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.InitResetPasswordInput) *usecase.InitResetPasswordOutput); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.InitResetPasswordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.InitResetPasswordInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthUsecaseIface_HandleInitesetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleInitesetPassword'
type AuthUsecaseIface_HandleInitesetPassword_Call struct {
	*mock.Call
}

// HandleInitesetPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - input usecase.InitResetPasswordInput
func (_e *AuthUsecaseIface_Expecter) HandleInitesetPassword(ctx interface{}, input interface{}) *AuthUsecaseIface_HandleInitesetPassword_Call {
	return &AuthUsecaseIface_HandleInitesetPassword_Call{Call: _e.mock.On("HandleInitesetPassword", ctx, input)}
}

func (_c *AuthUsecaseIface_HandleInitesetPassword_Call) Run(run func(ctx context.Context, input usecase.InitResetPasswordInput)) *AuthUsecaseIface_HandleInitesetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecase.InitResetPasswordInput))
	})
	return _c
}

func (_c *AuthUsecaseIface_HandleInitesetPassword_Call) Return(_a0 *usecase.InitResetPasswordOutput, _a1 error) *AuthUsecaseIface_HandleInitesetPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthUsecaseIface_HandleInitesetPassword_Call) RunAndReturn(run func(context.Context, usecase.InitResetPasswordInput) (*usecase.InitResetPasswordOutput, error)) *AuthUsecaseIface_HandleInitesetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// HandleLogin provides a mock function with given fields: ctx, input
func (_m *AuthUsecaseIface) HandleLogin(ctx context.Context, input usecase.LoginInput) (*usecase.LoginOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for HandleLogin")
	}

	var r0 *usecase.LoginOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.LoginInput) (*usecase.LoginOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.LoginInput) *usecase.LoginOutput); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.LoginOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.LoginInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthUsecaseIface_HandleLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleLogin'
type AuthUsecaseIface_HandleLogin_Call struct {
	*mock.Call
}

// HandleLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - input usecase.LoginInput
func (_e *AuthUsecaseIface_Expecter) HandleLogin(ctx interface{}, input interface{}) *AuthUsecaseIface_HandleLogin_Call {
	return &AuthUsecaseIface_HandleLogin_Call{Call: _e.mock.On("HandleLogin", ctx, input)}
}

func (_c *AuthUsecaseIface_HandleLogin_Call) Run(run func(ctx context.Context, input usecase.LoginInput)) *AuthUsecaseIface_HandleLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecase.LoginInput))
	})
	return _c
}

func (_c *AuthUsecaseIface_HandleLogin_Call) Return(_a0 *usecase.LoginOutput, _a1 error) *AuthUsecaseIface_HandleLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthUsecaseIface_HandleLogin_Call) RunAndReturn(run func(context.Context, usecase.LoginInput) (*usecase.LoginOutput, error)) *AuthUsecaseIface_HandleLogin_Call {
	_c.Call.Return(run)
	return _c
}

// HandleResendSignupVerification provides a mock function with given fields: ctx, input
func (_m *AuthUsecaseIface) HandleResendSignupVerification(ctx context.Context, input usecase.ResendSignupVerificationInput) (*usecase.ResendSignupVerificationOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for HandleResendSignupVerification")
	}

	var r0 *usecase.ResendSignupVerificationOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.ResendSignupVerificationInput) (*usecase.ResendSignupVerificationOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.ResendSignupVerificationInput) *usecase.ResendSignupVerificationOutput); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.ResendSignupVerificationOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.ResendSignupVerificationInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthUsecaseIface_HandleResendSignupVerification_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleResendSignupVerification'
type AuthUsecaseIface_HandleResendSignupVerification_Call struct {
	*mock.Call
}

// HandleResendSignupVerification is a helper method to define mock.On call
//   - ctx context.Context
//   - input usecase.ResendSignupVerificationInput
func (_e *AuthUsecaseIface_Expecter) HandleResendSignupVerification(ctx interface{}, input interface{}) *AuthUsecaseIface_HandleResendSignupVerification_Call {
	return &AuthUsecaseIface_HandleResendSignupVerification_Call{Call: _e.mock.On("HandleResendSignupVerification", ctx, input)}
}

func (_c *AuthUsecaseIface_HandleResendSignupVerification_Call) Run(run func(ctx context.Context, input usecase.ResendSignupVerificationInput)) *AuthUsecaseIface_HandleResendSignupVerification_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecase.ResendSignupVerificationInput))
	})
	return _c
}

func (_c *AuthUsecaseIface_HandleResendSignupVerification_Call) Return(_a0 *usecase.ResendSignupVerificationOutput, _a1 error) *AuthUsecaseIface_HandleResendSignupVerification_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthUsecaseIface_HandleResendSignupVerification_Call) RunAndReturn(run func(context.Context, usecase.ResendSignupVerificationInput) (*usecase.ResendSignupVerificationOutput, error)) *AuthUsecaseIface_HandleResendSignupVerification_Call {
	_c.Call.Return(run)
	return _c
}

// HandleResetPassword provides a mock function with given fields: ctx, input
func (_m *AuthUsecaseIface) HandleResetPassword(ctx context.Context, input usecase.ResetPasswordInput) (*usecase.ResetPasswordOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for HandleResetPassword")
	}

	var r0 *usecase.ResetPasswordOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.ResetPasswordInput) (*usecase.ResetPasswordOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.ResetPasswordInput) *usecase.ResetPasswordOutput); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.ResetPasswordOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.ResetPasswordInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthUsecaseIface_HandleResetPassword_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleResetPassword'
type AuthUsecaseIface_HandleResetPassword_Call struct {
	*mock.Call
}

// HandleResetPassword is a helper method to define mock.On call
//   - ctx context.Context
//   - input usecase.ResetPasswordInput
func (_e *AuthUsecaseIface_Expecter) HandleResetPassword(ctx interface{}, input interface{}) *AuthUsecaseIface_HandleResetPassword_Call {
	return &AuthUsecaseIface_HandleResetPassword_Call{Call: _e.mock.On("HandleResetPassword", ctx, input)}
}

func (_c *AuthUsecaseIface_HandleResetPassword_Call) Run(run func(ctx context.Context, input usecase.ResetPasswordInput)) *AuthUsecaseIface_HandleResetPassword_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecase.ResetPasswordInput))
	})
	return _c
}

func (_c *AuthUsecaseIface_HandleResetPassword_Call) Return(_a0 *usecase.ResetPasswordOutput, _a1 error) *AuthUsecaseIface_HandleResetPassword_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthUsecaseIface_HandleResetPassword_Call) RunAndReturn(run func(context.Context, usecase.ResetPasswordInput) (*usecase.ResetPasswordOutput, error)) *AuthUsecaseIface_HandleResetPassword_Call {
	_c.Call.Return(run)
	return _c
}

// HandleSignup provides a mock function with given fields: ctx, input
func (_m *AuthUsecaseIface) HandleSignup(ctx context.Context, input usecase.SignupInput) (*usecase.SignupOutput, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for HandleSignup")
	}

	var r0 *usecase.SignupOutput
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, usecase.SignupInput) (*usecase.SignupOutput, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, usecase.SignupInput) *usecase.SignupOutput); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*usecase.SignupOutput)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, usecase.SignupInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthUsecaseIface_HandleSignup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleSignup'
type AuthUsecaseIface_HandleSignup_Call struct {
	*mock.Call
}

// HandleSignup is a helper method to define mock.On call
//   - ctx context.Context
//   - input usecase.SignupInput
func (_e *AuthUsecaseIface_Expecter) HandleSignup(ctx interface{}, input interface{}) *AuthUsecaseIface_HandleSignup_Call {
	return &AuthUsecaseIface_HandleSignup_Call{Call: _e.mock.On("HandleSignup", ctx, input)}
}

func (_c *AuthUsecaseIface_HandleSignup_Call) Run(run func(ctx context.Context, input usecase.SignupInput)) *AuthUsecaseIface_HandleSignup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(usecase.SignupInput))
	})
	return _c
}

func (_c *AuthUsecaseIface_HandleSignup_Call) Return(_a0 *usecase.SignupOutput, _a1 error) *AuthUsecaseIface_HandleSignup_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthUsecaseIface_HandleSignup_Call) RunAndReturn(run func(context.Context, usecase.SignupInput) (*usecase.SignupOutput, error)) *AuthUsecaseIface_HandleSignup_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthUsecaseIface creates a new instance of AuthUsecaseIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthUsecaseIface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthUsecaseIface {
	mock := &AuthUsecaseIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
