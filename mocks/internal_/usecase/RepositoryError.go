// Code generated by mockery v2.52.2. DO NOT EDIT.

package usecase

import mock "github.com/stretchr/testify/mock"

// RepositoryError is an autogenerated mock type for the RepositoryError type
type RepositoryError struct {
	mock.Mock
}

type RepositoryError_Expecter struct {
	mock *mock.Mock
}

func (_m *RepositoryError) EXPECT() *RepositoryError_Expecter {
	return &RepositoryError_Expecter{mock: &_m.Mock}
}

// Error provides a mock function with no fields
func (_m *RepositoryError) Error() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Error")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RepositoryError_Error_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Error'
type RepositoryError_Error_Call struct {
	*mock.Call
}

// Error is a helper method to define mock.On call
func (_e *RepositoryError_Expecter) Error() *RepositoryError_Error_Call {
	return &RepositoryError_Error_Call{Call: _e.mock.On("Error")}
}

func (_c *RepositoryError_Error_Call) Run(run func()) *RepositoryError_Error_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RepositoryError_Error_Call) Return(_a0 string) *RepositoryError_Error_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RepositoryError_Error_Call) RunAndReturn(run func() string) *RepositoryError_Error_Call {
	_c.Call.Return(run)
	return _c
}

// NewRepositoryError creates a new instance of RepositoryError. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRepositoryError(t interface {
	mock.TestingT
	Cleanup(func())
}) *RepositoryError {
	mock := &RepositoryError{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
