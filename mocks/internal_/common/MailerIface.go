// Code generated by mockery v2.52.2. DO NOT EDIT.

package common

import (
	context "context"

	common "github.com/luckyAkbar/atec/internal/common"

	lib "github.com/sendinblue/APIv3-go-library/v2/lib"

	mock "github.com/stretchr/testify/mock"
)

// MailerIface is an autogenerated mock type for the MailerIface type
type MailerIface struct {
	mock.Mock
}

type MailerIface_Expecter struct {
	mock *mock.Mock
}

func (_m *MailerIface) EXPECT() *MailerIface_Expecter {
	return &MailerIface_Expecter{mock: &_m.Mock}
}

// SendEmail provides a mock function with given fields: ctx, input
func (_m *MailerIface) SendEmail(ctx context.Context, input common.SendEmailInput) (*lib.CreateSmtpEmail, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for SendEmail")
	}

	var r0 *lib.CreateSmtpEmail
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, common.SendEmailInput) (*lib.CreateSmtpEmail, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, common.SendEmailInput) *lib.CreateSmtpEmail); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*lib.CreateSmtpEmail)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, common.SendEmailInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MailerIface_SendEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEmail'
type MailerIface_SendEmail_Call struct {
	*mock.Call
}

// SendEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - input common.SendEmailInput
func (_e *MailerIface_Expecter) SendEmail(ctx interface{}, input interface{}) *MailerIface_SendEmail_Call {
	return &MailerIface_SendEmail_Call{Call: _e.mock.On("SendEmail", ctx, input)}
}

func (_c *MailerIface_SendEmail_Call) Run(run func(ctx context.Context, input common.SendEmailInput)) *MailerIface_SendEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(common.SendEmailInput))
	})
	return _c
}

func (_c *MailerIface_SendEmail_Call) Return(_a0 *lib.CreateSmtpEmail, _a1 error) *MailerIface_SendEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MailerIface_SendEmail_Call) RunAndReturn(run func(context.Context, common.SendEmailInput) (*lib.CreateSmtpEmail, error)) *MailerIface_SendEmail_Call {
	_c.Call.Return(run)
	return _c
}

// NewMailerIface creates a new instance of MailerIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMailerIface(t interface {
	mock.TestingT
	Cleanup(func())
}) *MailerIface {
	mock := &MailerIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
