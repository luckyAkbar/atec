// Code generated by mockery v2.52.2. DO NOT EDIT.

package repository

import (
	context "context"

	model "github.com/luckyAkbar/atec/internal/model"
	mock "github.com/stretchr/testify/mock"

	repository "github.com/luckyAkbar/atec/internal/repository"

	uuid "github.com/google/uuid"
)

// PackageRepoIface is an autogenerated mock type for the PackageRepoIface type
type PackageRepoIface struct {
	mock.Mock
}

type PackageRepoIface_Expecter struct {
	mock *mock.Mock
}

func (_m *PackageRepoIface) EXPECT() *PackageRepoIface_Expecter {
	return &PackageRepoIface_Expecter{mock: &_m.Mock}
}

// Create provides a mock function with given fields: ctx, input
func (_m *PackageRepoIface) Create(ctx context.Context, input repository.CreatePackageInput) (*model.Package, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 *model.Package
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreatePackageInput) (*model.Package, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.CreatePackageInput) *model.Package); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Package)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.CreatePackageInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PackageRepoIface_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type PackageRepoIface_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - ctx context.Context
//   - input repository.CreatePackageInput
func (_e *PackageRepoIface_Expecter) Create(ctx interface{}, input interface{}) *PackageRepoIface_Create_Call {
	return &PackageRepoIface_Create_Call{Call: _e.mock.On("Create", ctx, input)}
}

func (_c *PackageRepoIface_Create_Call) Run(run func(ctx context.Context, input repository.CreatePackageInput)) *PackageRepoIface_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.CreatePackageInput))
	})
	return _c
}

func (_c *PackageRepoIface_Create_Call) Return(_a0 *model.Package, _a1 error) *PackageRepoIface_Create_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PackageRepoIface_Create_Call) RunAndReturn(run func(context.Context, repository.CreatePackageInput) (*model.Package, error)) *PackageRepoIface_Create_Call {
	_c.Call.Return(run)
	return _c
}

// Delete provides a mock function with given fields: ctx, id
func (_m *PackageRepoIface) Delete(ctx context.Context, id uuid.UUID) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for Delete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PackageRepoIface_Delete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Delete'
type PackageRepoIface_Delete_Call struct {
	*mock.Call
}

// Delete is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *PackageRepoIface_Expecter) Delete(ctx interface{}, id interface{}) *PackageRepoIface_Delete_Call {
	return &PackageRepoIface_Delete_Call{Call: _e.mock.On("Delete", ctx, id)}
}

func (_c *PackageRepoIface_Delete_Call) Run(run func(ctx context.Context, id uuid.UUID)) *PackageRepoIface_Delete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PackageRepoIface_Delete_Call) Return(_a0 error) *PackageRepoIface_Delete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PackageRepoIface_Delete_Call) RunAndReturn(run func(context.Context, uuid.UUID) error) *PackageRepoIface_Delete_Call {
	_c.Call.Return(run)
	return _c
}

// FindByID provides a mock function with given fields: ctx, id
func (_m *PackageRepoIface) FindByID(ctx context.Context, id uuid.UUID) (*model.Package, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for FindByID")
	}

	var r0 *model.Package
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (*model.Package, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) *model.Package); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Package)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PackageRepoIface_FindByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByID'
type PackageRepoIface_FindByID_Call struct {
	*mock.Call
}

// FindByID is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
func (_e *PackageRepoIface_Expecter) FindByID(ctx interface{}, id interface{}) *PackageRepoIface_FindByID_Call {
	return &PackageRepoIface_FindByID_Call{Call: _e.mock.On("FindByID", ctx, id)}
}

func (_c *PackageRepoIface_FindByID_Call) Run(run func(ctx context.Context, id uuid.UUID)) *PackageRepoIface_FindByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *PackageRepoIface_FindByID_Call) Return(_a0 *model.Package, _a1 error) *PackageRepoIface_FindByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PackageRepoIface_FindByID_Call) RunAndReturn(run func(context.Context, uuid.UUID) (*model.Package, error)) *PackageRepoIface_FindByID_Call {
	_c.Call.Return(run)
	return _c
}

// FindOldestActiveAndLockedPackage provides a mock function with given fields: ctx
func (_m *PackageRepoIface) FindOldestActiveAndLockedPackage(ctx context.Context) (*model.Package, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for FindOldestActiveAndLockedPackage")
	}

	var r0 *model.Package
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (*model.Package, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) *model.Package); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Package)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PackageRepoIface_FindOldestActiveAndLockedPackage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindOldestActiveAndLockedPackage'
type PackageRepoIface_FindOldestActiveAndLockedPackage_Call struct {
	*mock.Call
}

// FindOldestActiveAndLockedPackage is a helper method to define mock.On call
//   - ctx context.Context
func (_e *PackageRepoIface_Expecter) FindOldestActiveAndLockedPackage(ctx interface{}) *PackageRepoIface_FindOldestActiveAndLockedPackage_Call {
	return &PackageRepoIface_FindOldestActiveAndLockedPackage_Call{Call: _e.mock.On("FindOldestActiveAndLockedPackage", ctx)}
}

func (_c *PackageRepoIface_FindOldestActiveAndLockedPackage_Call) Run(run func(ctx context.Context)) *PackageRepoIface_FindOldestActiveAndLockedPackage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *PackageRepoIface_FindOldestActiveAndLockedPackage_Call) Return(_a0 *model.Package, _a1 error) *PackageRepoIface_FindOldestActiveAndLockedPackage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PackageRepoIface_FindOldestActiveAndLockedPackage_Call) RunAndReturn(run func(context.Context) (*model.Package, error)) *PackageRepoIface_FindOldestActiveAndLockedPackage_Call {
	_c.Call.Return(run)
	return _c
}

// Search provides a mock function with given fields: ctx, input
func (_m *PackageRepoIface) Search(ctx context.Context, input repository.SearchPackageInput) ([]model.Package, error) {
	ret := _m.Called(ctx, input)

	if len(ret) == 0 {
		panic("no return value specified for Search")
	}

	var r0 []model.Package
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.SearchPackageInput) ([]model.Package, error)); ok {
		return rf(ctx, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.SearchPackageInput) []model.Package); ok {
		r0 = rf(ctx, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]model.Package)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.SearchPackageInput) error); ok {
		r1 = rf(ctx, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PackageRepoIface_Search_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Search'
type PackageRepoIface_Search_Call struct {
	*mock.Call
}

// Search is a helper method to define mock.On call
//   - ctx context.Context
//   - input repository.SearchPackageInput
func (_e *PackageRepoIface_Expecter) Search(ctx interface{}, input interface{}) *PackageRepoIface_Search_Call {
	return &PackageRepoIface_Search_Call{Call: _e.mock.On("Search", ctx, input)}
}

func (_c *PackageRepoIface_Search_Call) Run(run func(ctx context.Context, input repository.SearchPackageInput)) *PackageRepoIface_Search_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(repository.SearchPackageInput))
	})
	return _c
}

func (_c *PackageRepoIface_Search_Call) Return(_a0 []model.Package, _a1 error) *PackageRepoIface_Search_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PackageRepoIface_Search_Call) RunAndReturn(run func(context.Context, repository.SearchPackageInput) ([]model.Package, error)) *PackageRepoIface_Search_Call {
	_c.Call.Return(run)
	return _c
}

// Update provides a mock function with given fields: ctx, id, input
func (_m *PackageRepoIface) Update(ctx context.Context, id uuid.UUID, input repository.UpdatePackageInput) (*model.Package, error) {
	ret := _m.Called(ctx, id, input)

	if len(ret) == 0 {
		panic("no return value specified for Update")
	}

	var r0 *model.Package
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, repository.UpdatePackageInput) (*model.Package, error)); ok {
		return rf(ctx, id, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID, repository.UpdatePackageInput) *model.Package); ok {
		r0 = rf(ctx, id, input)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Package)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID, repository.UpdatePackageInput) error); ok {
		r1 = rf(ctx, id, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// PackageRepoIface_Update_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Update'
type PackageRepoIface_Update_Call struct {
	*mock.Call
}

// Update is a helper method to define mock.On call
//   - ctx context.Context
//   - id uuid.UUID
//   - input repository.UpdatePackageInput
func (_e *PackageRepoIface_Expecter) Update(ctx interface{}, id interface{}, input interface{}) *PackageRepoIface_Update_Call {
	return &PackageRepoIface_Update_Call{Call: _e.mock.On("Update", ctx, id, input)}
}

func (_c *PackageRepoIface_Update_Call) Run(run func(ctx context.Context, id uuid.UUID, input repository.UpdatePackageInput)) *PackageRepoIface_Update_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID), args[2].(repository.UpdatePackageInput))
	})
	return _c
}

func (_c *PackageRepoIface_Update_Call) Return(_a0 *model.Package, _a1 error) *PackageRepoIface_Update_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *PackageRepoIface_Update_Call) RunAndReturn(run func(context.Context, uuid.UUID, repository.UpdatePackageInput) (*model.Package, error)) *PackageRepoIface_Update_Call {
	_c.Call.Return(run)
	return _c
}

// NewPackageRepoIface creates a new instance of PackageRepoIface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPackageRepoIface(t interface {
	mock.TestingT
	Cleanup(func())
}) *PackageRepoIface {
	mock := &PackageRepoIface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
